module main {

    /* Type encoding */
    type addr_t = bv64;
    type ca_t = bv64;
    type data_t = bv8;
    type pid_t = bv1;

    /* State variables */
    // spec 0.5 says these keys should be 72 bits

    /*****
    =================================================================================
    Start of memory safety monitor mappings */

    // ASSUMPTION THAT ALL CA'S ARE UNIQUE, DESPITE MULTIPLE PROCS
    type alloc_state_t = enum {ENCRYPTED, UNINITIALIZED};

    var alloc_d_keys  :   [ca_t]bv24;
    var alloc_p_keys  :   [ca_t]bv24;
    var alloc_state   :   [ca_t]alloc_state_t;

    // determines if the other arrays are valid or not
    // use this to check for existence of an allocation
    var alloc_valid   :   [ca_t]boolean;  

    //determines if memory allocator allocated this entry or not
    // if false, then it's most likely a product of a memory violation
    var alloc_allocated :   [ca_t]boolean;

    // true if there's an encrypted slice that exists
    var alloc_encrypted_slices : [bv24]boolean;

    // true if raw address has been taken up
    var addr_is_alloc : [addr_t]boolean;

    // base CAs and the sizes of allocations
    var alloc_sizes : [ca_t]bv64;
    /* ===============================================================================
    End of memory safety monitor variables */

    /* spec p14 defines maximum allocation size */
    define MAX_ALLOC_SIZE() : bv64 = 1bv64;
    define S_PRIME_IDX() : integer = 47;
    define S_IDX() : integer = 63;

    /* Calculates the tweak to be used with K-Cipher */
    /* Extracts bits [31 : power] from addr */
    define get_fixed_addr (power : bv6, addr: addr_t) : bv32 =
        bv_left_shift(0bv58 ++ power,
            bv_l_right_shift(0bv58 ++ power, addr & 4294967295bv64))[31 : 0];

    /* Extracts bits [power - 1 : 0] from addr */
    define get_offset (power : bv6, addr: addr_t) : bv32 =
        (bv_l_right_shift((64bv64 - (0bv58 ++ power)),
            bv_left_shift((64bv64 - (0bv58 ++ power)), addr)))[31:0];

    /* Generates a raw address */
    function generate_addr (size : bv64) : addr_t;

    /* Generates a CA given a size */
    procedure malloc(size : bv64, pkey : bv24)
        returns (ca : ca_t)
        modifies addr_is_alloc, alloc_encrypted_slices,
            alloc_allocated, alloc_p_keys, alloc_state, alloc_valid, debug_raw, debug_raw1, alloc_sizes;

        // TODO temporary, hard to reason about bigger allocation
        requires (size == 1bv64);
        requires ((size >_u 0bv64) && (size <=_u MAX_ALLOC_SIZE()));
        ensures ((ca + size) >_u ca) && (alloc_allocated[ca]);
    {
        // The address we generate given the size.
        var addr : addr_t;
        var _i : bv64;

        // Parts of the address
        var padded_fixed_addr : bv32;
        var padded_offset : bv32;
        var upper_addr : bv15;
        var s : bv1;
        var s_prime: bv1;
        var power : bv6;

        var encrypted_slice : bv24;
        var _state : alloc_state_t;

        addr = generate_addr(size);

        // make sure this isn't too big to prevent overflow
        assume ((addr + size) >_u addr);
        // not the upper bound, but this will do for now!
        assume ((addr + size) <_u 18446603336221196288bv64);

        // LAM48 canonical checks
        assume (addr[62 : 47] == bv_sign_extend(15, addr[S_IDX() : S_IDX()])
            && addr[63 : 63] == addr[S_PRIME_IDX() : S_PRIME_IDX()]);

        // addr_is_alloc alignment
        assume (forall (i : bv64) :: ((i >=_u 0bv64) &&
            (i <_u size)) ==> (addr_is_alloc[addr + i] == false));

        _i = 0bv64;
        while (_i <_u size)
            // loop _i must be within bounds
            invariant ((_i >=_u 0bv64) && (_i <=_u size));
            // the addr_is_alloc must be working
            invariant (forall (i : bv64) ::
                (i >= 0bv64 && i < _i) ==> ((addr_is_alloc[addr + i] == true)));
        {
            addr_is_alloc[addr + _i] = true;
            _i = _i + 1bv64;
        }

        // LAM48 spec
        s = addr[S_IDX() : S_IDX()];
        s_prime = addr[S_PRIME_IDX() : S_PRIME_IDX()];

        // Ensure the encrypted slice is unique
        assume (alloc_encrypted_slices[encrypted_slice] == false);
        alloc_encrypted_slices[encrypted_slice] = true;

        // Return CA as defined in spec, rev. 0.5
        ca = s ++ power ++ encrypted_slice[23 : 15]
                ++ s_prime ++ encrypted_slice[14 : 0] ++ addr[31 : 0];
        
        // set the allocation structure
        _state = UNINITIALIZED;
        _i = 0bv64;
        while (_i <_u size)
            invariant ((_i >=_u 0bv64) && (_i <=_u size));
        {
            call set_alloc_metadata(ca + _i, pkey, _state);
            _i = _i + 1bv64;
        }
        call set_alloc_metadata(ca, pkey, _state);
        alloc_sizes[ca] = size;
    }

    /* Sets alloc metadata if needed */
    procedure set_alloc_metadata(ca : ca_t, pkey : bv24, state : alloc_state_t)
        modifies alloc_allocated, alloc_p_keys, alloc_state, alloc_valid, debug_raw1, debug_raw;
    {
        if (alloc_valid[ca] == true) {
            alloc_allocated[ca] = true;
        } else {
            alloc_p_keys[ca] = pkey;
            alloc_state[ca] = state;
            alloc_allocated[ca] = true;
            alloc_valid[ca] = true;
        }
    }

    /* Read a byte (unprotected read), returns true if successful */
    procedure read_byte(ca : ca_t, dkey : bv24, pkey : bv24)
        returns (success : boolean)
        requires (ca >=_u 0bv64);
    {
        var ciphertext : bv24;
        ciphertext = ca[56 : 48] ++ ca[46 : 32];
        success = !((alloc_valid[ca] == false) ||
                (alloc_encrypted_slices[ciphertext] == false)) && (alloc_p_keys[ca] == pkey) && ((alloc_state[ca] == UNINITIALIZED) || ((alloc_d_keys[ca] == dkey))) || (alloc_valid[ca]);
    }

    /* Frees an allocation */
    procedure free(ca : ca_t, pkey : bv24)
        returns (success : boolean)
        modifies alloc_valid, alloc_allocated;
    {
        var _i : bv64;

        success = !((alloc_valid[ca] == false) || (alloc_sizes[ca] == 0bv64));

        if (success) {
            _i = 0bv64;
            alloc_valid[ca] = false;
            alloc_allocated[ca] = false;
            while (_i <_u alloc_sizes[ca]) {
                alloc_valid[ca + _i] = false;
                alloc_allocated[ca + _i] = false;
            }
        }
    }


    /* Writes a byte */
    procedure write_byte(ca : ca_t, dkey : bv24, pkey : bv24)
        modifies alloc_encrypted_slices,
            alloc_allocated, alloc_d_keys, alloc_p_keys, alloc_state, alloc_valid, debug_raw1, debug_raw;
        ensures (alloc_valid[ca] == true);
    {
        var _state : alloc_state_t;
        _state = ENCRYPTED;

        if (alloc_valid[ca] == false) {
            // OOB write
            // assert (false);
            //alloc_p_keys[ca] = pkey;
            call set_alloc_metadata(ca, pkey, _state);
        } else {
            // Regular access
            alloc_d_keys[ca] = dkey;
            alloc_state[ca] = _state;
        }
    }

    init {
        havoc current_pid;

        alloc = 0bv64;
        size = 1bv64;
        confidential = true;
        action = MALLOC;
        
        debug_raw1 = true;

        assume ((pointer_keys[0bv2] != pointer_keys[1bv2])
            && (pointer_keys[0bv2] != pointer_keys[2bv2])
            && (pointer_keys[0bv2] != pointer_keys[3bv2]));

        assume ((pointer_keys[1bv2] != pointer_keys[2bv2])
            && (pointer_keys[1bv2] != pointer_keys[3bv2]));

        assume (pointer_keys[2bv2] != pointer_keys[3bv2]);

        assume ((data_keys[0bv2] != data_keys[1bv2])
            && (data_keys[0bv2] != data_keys[2bv2])
            && (data_keys[0bv2] != data_keys[3bv2]));

        assume ((data_keys[1bv2] != data_keys[2bv2])
            && (data_keys[1bv2] != data_keys[3bv2]));

        assume (data_keys[2bv2] != data_keys[3bv2]);

        assume (forall (i : ca_t) ::  alloc_valid[i] == false);
        assume (forall (i : addr_t) ::  addr_is_alloc[i] == false);
        assume (forall (i : ca_t) ::  alloc_allocated[i] == false);
        assume (forall (i : ca_t) ::  alloc_sizes[i] == 0bv64);
    }

    /**
    * Testbench
    */
    type action_t = enum {MALLOC, WRITE, READ, FREE};
    var alloc : ca_t;
    var size : bv64;
    var confidential : boolean;
    var action : action_t;
    var debug_raw : ca_t;
    var debug_raw1 : boolean;
    var free_success : boolean;

    // will try to read an arbitrary CA
    var target_read : ca_t;

    axiom size_lim : ((size >_u 0bv64) && (size <=_u MAX_ALLOC_SIZE())); 

    invariant confidentiality :
        ((action == READ) && confidential && alloc_allocated[target_read]
        && (alloc_state[target_read] == ENCRYPTED)) && (alloc_valid[target_read]) ==>
        confidential || ((pointer_keys[current_pid] == alloc_p_keys[target_read])
            && (data_keys[current_pid] == alloc_d_keys[target_read]));

    var current_pid : bv2;
    var pointer_keys : [bv2]bv24;
    var data_keys : [bv2]bv24;

    // Adversarial action
    next {
        var pointer_key : bv24;
        var data_key : bv24;

        havoc size;
        havoc action;
        havoc target_read;
        havoc current_pid;

        pointer_key = pointer_keys[current_pid];
        data_key = data_keys[current_pid];

        case
            (action == MALLOC) : {
                call (alloc') = malloc(size, pointer_key);
            }

            (action == WRITE) : {
                call write_byte(target_read, data_key, pointer_key);
            }

            (action == READ) : {
                call (confidential') = read_byte(target_read, data_key, pointer_key);
            }

            (action == FREE) : {
                call (free_success') = free(target_read, pointer_key);
            }
        esac
    }

    control {
        f = bmc(7);
        check;
        f.print_cex();
        print_results;
    }

}
