module main {

    /* Type encoding */
    type addr_t = bv64;
    type ca_t = bv64;
    type data_t = bv64;
    type pid_t = bv1;
    type mem_t = [addr_t]data_t;

    /* State variables */
    var memory      :   mem_t;
    var pointer_key :   bv24;
    var data_key    :   bv24;
    // TODO pointer_key and data_key will need to be per process.
    // spec 0.5 says these keys should be 72 bits

    /* Specifies the size of a given allocation */
    var addr_alloc  :   [addr_t]bv64;

    /* True if there's an active allocation of addr_t */
    var addr_is_alloc  :   [addr_t]boolean;

    /* Calculates the tweak to be used with K-Cipher */
    define calculate_tweak(arg : bv38) : bv24 =
        arg[23 : 0] ^ (0bv10 ++ arg[37 : 24]);

    define k_cipher(
                plaintext : bv24,
                key : bv24,
                tweak : bv24) : bv24 = plaintext ^ key ^ tweak;
    // TODO need to define axioms for cryptographic unit.

    /* Extracts bits [31 : power] from addr */
    define get_fixed_addr (power : bv6, addr: addr_t) : bv32 =
        bv_left_shift(0bv58 ++ power , bv_l_right_shift(0bv58 ++ power, addr & 4294967295bv64))[31 : 0];

    /* Extracts bits [power - 1 : 0] from addr */
    define get_offset (power : bv6, addr: addr_t) : bv32 =
    (bv_l_right_shift((64bv64 - (0bv58 ++ power)), bv_left_shift((64bv64 - (0bv58 ++ power)), addr)))[31:0];

    /* Generates a raw address */
    function generate_addr (size : bv64) : addr_t;

    /* Get the power bits from the size */
    function generate_power (size : bv64) : bv6;

    /* Generates a CA given a size */
    procedure malloc(size : bv64)
        returns (ca : ca_t)
        modifies memory, addr_alloc, addr_is_alloc;
        requires (size > 0bv64);
    {
        // The address we generate given the size.
        var addr : addr_t;

        // Parts of the address
        var padded_fixed_addr : bv32;
        var padded_offset : bv32;
        var upper_addr : bv15;
        var s : bv1;
        var s_prime: bv1;

        // Arguments for K-Cipher
        var power : bv6;
        var tweak : bv24;

        var encrypted_slice : bv24;

        // (2**power) >= size AND (2**(power-1) < size)
        power = generate_power(size);
        assume ((bv_left_shift(0bv58 ++ power, 1bv64) >= size)
            && bv_left_shift(0bv58 ++ (power - 1bv6), 1bv64) < size);

        // generate raw physical address from the allocator
        addr = generate_addr(size);
        assume (addr_is_alloc[addr] == false);
        addr_alloc[addr] = size;
        addr_is_alloc[addr] = true;

        // LAM48 spec
        upper_addr = addr[46 : 32];
        s = addr[63 : 63];
        s_prime = addr[47 : 47];

        // setup the tweak
        padded_offset = get_offset(power, addr);
        padded_fixed_addr = get_fixed_addr(power, addr);
        assert ((padded_offset | padded_fixed_addr) == addr[31:0]);

        tweak = calculate_tweak(power ++ padded_fixed_addr);

        // Throw everything into the K-Cipher
        encrypted_slice = k_cipher(0bv9 ++ upper_addr, pointer_key, tweak);

        // Return CA as defined in spec, rev. 0.5
        ca = s ++ power ++ encrypted_slice[23 : 15]
                ++ s_prime ++ encrypted_slice[14 : 0] ++ addr[31 : 0];
    }

    init {
        assume (forall (i : addr_t) :: addr_alloc[i] == 0bv64);
        assume (forall (i : addr_t) :: addr_is_alloc[i] == false);
    }

    /**
    * Testbench
    */
    var alloc : ca_t;

    next {
        var size : bv64;
        assume (size > 0bv64);
        call (alloc') = malloc(size);
    }

    control {
        f = bmc(5);
        check;
        f.print_cex();
        print_results;
    }

}
